name: test
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      kind:
        image: kindest/node:v1.30.0
        options: --privileged

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: false

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Set up kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.23.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      - name: Create Kubernetes cluster
        run: kind create cluster --wait 5m

      - name: Create test PVCs and PODs
        run: |
          kubectl apply -f test/1-pvc.yaml
          kubectl apply -f test/1-pod.yaml
          kubectl delete -f test/1-pod.yaml
          kubectl apply -f test/2-pvc.yaml
          kubectl apply -f test/2-pod.yaml
          kubectl apply -f test/3-pvc.yaml
          kubectl apply -f test/3-pod.yaml
          kubectl delete -f test/3-pod.yaml
          kubectl apply -f test/4-pvc.yaml
          kubectl apply -f test/4-pod.yaml

      - name: Install SSHFS
        uses: awalsh128/cache-apt-pkgs-action@latest
        with: 
          packages: sshfs
#        run: sudo apt-get update && sudo apt-get install -y sshfs --no-install-recommends --no-install-suggests

      - name: Build pv-mounter
        run: make bin

      - name: Create mountpoint
        run: mkdir foo

      - name: Check state of test objects again
        run: |
         kubectl get pod 
         kubectl get pvc

      - name: Run tests
        run: |
          echo 'Unmounted PVC with RWO access mode'
          ./bin/pv-mounter mount default pvc-1 foo
          touch foo/bar
          ls -l foo/bar
          ./bin/pv-mounter clean default pvc-1 foo
          echo 'Mounted PVC with RWO access mode'
          ./bin/pv-mounter mount default pvc-2 foo
          touch foo/bar
          ls -l foo/bar
          ./bin/pv-mounter clean default pvc-2 foo
          echo 'Unmounted PVC with RWO access mode (NEEDS_ROOT)'
          ./bin/pv-mounter mount --needs-root default pvc-3 foo
          touch foo/bar
          ls -l foo/bar
          ./bin/pv-mounter clean default pvc-3 foo
          echo 'Mounted PVC with RWO access mode (NEEDS_ROOT)'
          ./bin/pv-mounter mount --needs-root default pvc-4 foo
          touch foo/bar
          ls -l foo/bar
          ./bin/pv-mounter clean default pvc-4 foo
 
      - name: Delete PODs and PVCs
        run: |
          kubectl delete -f test/2-pod.yaml --force --grace-period=0
          kubectl delete -f test/1-pvc.yaml --force --grace-period=0
          kubectl delete -f test/2-pvc.yaml --force --grace-period=0
          kubectl delete -f test/4-pod.yaml --force --grace-period=0
          kubectl delete -f test/3-pvc.yaml --force --grace-period=0
          kubectl delete -f test/4-pvc.yaml --force --grace-period=0


      - name: Delete cluster
        run: kind delete cluster


